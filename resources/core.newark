;; on load we compile this file
;; all definitions here are added to any client environment

(defsyntax cond
  [(cond) #nil]

  [(cond [test body ...] more ...)
   (if test (do body ...) (cond more ...))])

(defsyntax case* 
  [(case* _) #f]

  [(case* _ [:else body ...])
   (do body ...)]

  [(case* val [test body ...] more ...)
   (if (= val test)
       (do body ...)
       (case* val more ...))])

(defsyntax case
  [(case expr clauses ...)
   (let [(val expr)] 
     (case* val clauses ...))])

(defsyntax or
  [(or) #f]
  [(or x) x]
  [(or x xs ...) (let ([x* x]) (if x* x* (or xs ...)))])

(defsyntax and
  [(and) #t]
  [(and x) x]
  [(and x xs ...) (let ([x* x]) (if x* (and xs ...) x*))])

(defsyntax when 
  [(when test body ...) 
   (if test (do body ...) #nil)])

(defsyntax ->
  [(-> x)            x]
  [(-> x (y ys ...)) (y x ys ...)]
  [(-> x y)          (y x)]
  [(-> x y zs ...)   (-> (-> x y) zs ...)])

(defsyntax ->>
  [(->> x)            x]
  [(->> x (y ys ...)) (y ys ... x)]
  [(->> x y)          (y x)]
  [(->> x y zs ...)   (->> (->> x y) zs ...)])

(defsyntax doto*
  [(doto* obj) obj]
  [(doto* obj expr exprs ...)
   (do (-> obj expr) (doto* obj exprs ...))])

(defsyntax doto
  [(doto expr exprs ...)
   (let [(obj expr)]
     (doto* obj exprs ...))])

(defsyntax call!
  [(call! callee var args ...)
   (set! var (callee var args ...))])

(defsyntax fn
  [(fn (args ...) body ...)
   (fn* #f #f (args ...) body ...)])

(defsyntax def
  [(def (name args ...) body ...)
   (def* name (fn (args ...) (block* name body ...)))]
  [(def name expression)
   (def* name expression)])

;; (defsyntax for-each/array
;;   [(for-each/array ([var array]) body ...) 
;;    (let ([i 0] [ii (. array "length")])
;;      (while (< i ii)
;;        (let ([var (. array i)])
;;          (set! i (+ i 1))
;;          (do body ...))))]
;;   [(for-each/array ([var array] more ...) body ...)
;;    (for-each/array ([var array]) 
;;      (for-each/array (more ...) body ...))])

;; (defsyntax for/array 
;;   [(for/array bindings body ...)
;;    (let [(result (js.Array))]
;;      (for-each/array bindings
;;        (.push result (do body ...)))
;;      result)])

;; (defsyntax loop
;;   [(loop return body ...)
;;    (let ((sentinel #t)
;;          (result #nil))
;;      (let-syntax ((return 
;;                    ((return)     (do (set! sentinel #f) (set! result #nil)))
;;                    ((return val) (do (set! sentinel #f) (set! result val)))))
;;        (while sentinel body ...)))])

;; (defsyntax callf
;;   [(callf f location args ...)
;;    (set! location (f location args ...))])

;; (defsyntax )

(def (foo xs ...) xs)