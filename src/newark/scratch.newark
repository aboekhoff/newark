(define-syntax let*
  [(let* [] body ...) 
   (let [] body ...)]

  [(let* [(name value) more ...] body ...)
   (let [(name value)] (let* [more ...] body ...))])

(define-syntax or
  [(or) #false]
  [(or x) x]
  [(or x xs ...) (let [(x* x)] (if x* x* (or xs ...)))])

;(define-syntax and
;  [(and) #true]
;  [(and x) x]
;  [(and x xs ...) (let [(x* x)] (if x* (and xs ...) x*))])

;(define-syntax when 
;  [(when test body ...) (if test (begin body ...))])

;(when (or #f #nil js.NaN 42)
;      (and #t 42))

(for-each-property [property js]
  (js.alert property))

(define x1 (or))
(define x2 (or 1))
(define x3 (or 1 2 3))

(define x4 (+ x1 x2 x3))
(define x5 (< x1 x2 x3 x4))